#!/usr/bin/env perl

use strict;
use warnings;

our $VERSION = '1.0';

=head1 NAME

git-dbic-diff

=head1 DESCRIPTION

dbic-diff-db is a heavily modified version of Mike Eldridge's excellent git-dbic-diff
utility. Instead of comparing git revisions, it takes a snapshot of your current db via
Schema::Loader, and compares that to your class files, providing both sets of
differences.

=head1 SYNOPSIS

    $ dbic-diff-db [--db <dbtype>] <dsn> <schema> <schema_dir> [<schema_dir>] [<db_user>] [<db_pass>]
    
dbtype is any database type recognized by SQL::Translator.  the default is "MySQL".

=head1 EXAMPLES

    $ dbic-diff-db dbi:mysql:my_db MyApp::Schema
    $ dbic-diff-db dbi:mysql:my_db MyApp::Schema lib myuser
    $ dbic-diff-db dbi:mysql:my_db MyApp::Schema /path/to/lib myuser mypass


=head1 AUTHOR

Andrew Nelson <anelson@cpan.org>

=cut

use Directory::Scratch;
use File::Copy::Recursive qw(dircopy);
use SQL::Translator;
use SQL::Translator::Diff;
use SQL::Translator::Schema::Constants;
use Getopt::Attribute;
use DBIx::Class::Schema::Loader qw(make_schema_at);


our $db : Getopt(db=s MySQL);

my $dsn = shift;
my $schema = shift;
my $schema_dir = shift || 'lib';
my $db_username = shift || 'root';
my $db_password = shift;

if (not $dsn or not $schema) {
	print "usage: dbic-diff-live <dsn> <schema> [<schema_dir>] [<db_user>] [<db_pass>]\n";
	exit 1;
}

# set autoflush and create a temporary directory structure for storing
# the two trees.

$| = 1;

my $scratch	= new Directory::Scratch;

my $connect_info;
push @{$connect_info}, $dsn;
push @{$connect_info}, $db_username if($db_username);
push @{$connect_info}, $db_password if($db_password);

my $db_files = $scratch->mkdir('db');
my $src_files = $scratch->mkdir('src');

make_schema_at(
    $schema,
    {
        dump_directory => "$db_files",
    },
    $connect_info,
);

dircopy($schema_dir, $src_files);

my $collector = sub
{
	my $aref = shift;

	return sub {
		my $path = shift;

		if ($path->is_dir) {
			my $dir = $path->subdir('lib');

			push @$aref, $dir if $path->contains($dir);
		}
	}
};

# find any library paths

my @path_db;
my @path_src;

$db_files->recurse(callback => $collector->(\@path_db));
$src_files->recurse(callback => $collector->(\@path_src));

my @args_db =
(
	qq{-I$db_files},
	qq{-MSQL::Translator::Schema::Constraint},
	qq{-M$schema},
	qq{-e},
	qq{$schema->connect('dbd:nullp')->create_ddl_dir('$db', 'DB', '$scratch')}
);

my @args_src =
(
	qq{-I$src_files},
	qq{-MSQL::Translator::Schema::Constraint},
	qq{-M$schema},
	qq{-e},
	qq{$schema->connect('dbd:nullp')->create_ddl_dir('$db', 'SRC', '$scratch')}
);

# fork and create DDLs for both the OLD and the NEW versions

print "-- creating DDLs...";

if (my $pid = fork) {
	waitpid $pid, 0;
} else {
	close STDOUT;
	close STDERR;

	exec perl => @args_db;
}

if (my $pid = fork) {
	waitpid $pid, 0;
} else {
	close STDOUT;
	close STDERR;

	exec perl => @args_src;
}

print "done\n";

# then read the two schemas into SQL::Translator objects and
# perform a diff between the two using SQL::Translator::Diff

print "-- performing diff... from DB to source";

(my $file = $schema) =~ s/::/-/g;

my $sqlt_db = SQL::Translator->new(parser => $db);
my $sqlt_src = SQL::Translator->new(parser => $db);

$sqlt_db->translate("$scratch/$file-DB-$db.sql");
$sqlt_src->translate("$scratch/$file-SRC-$db.sql");

$sqlt_db->schema->name('db');
$sqlt_src->schema->name('src');

my $opts =
{
	caseopt						=> 0,
	ignore_index_names			=> 0,
	ignore_constraint_names		=> 0,
	ignore_view_sql				=> 0,
	ignore_proc_sql				=> 0,
	output_db					=> $db,
	no_batch_alters				=> 1,
	debug						=> 1,
	trace						=> 1
};

my $diff_to_src = SQL::Translator::Diff::schema_diff($sqlt_db->schema, $db, $sqlt_src->schema, $db, $opts);

print "done\n\n";

print $diff_to_src;

print "-- performing diff... from source to DB";

my $diff_to_db = SQL::Translator::Diff::schema_diff($sqlt_src->schema, $db, $sqlt_db->schema, $db, $opts);

print "done\n\n";

print $diff_to_db;